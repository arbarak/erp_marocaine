version: '3.8'

services:
  postgres:
    image: postgres:16-alpine
    container_name: erp_postgres
    environment:
      POSTGRES_DB: erp_db
      POSTGRES_USER: erp_user
      POSTGRES_PASSWORD: erp_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./ops/scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U erp_user -d erp_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erp_network

  redis:
    image: redis:7-alpine
    container_name: erp_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - erp_network

  minio:
    image: minio/minio:latest
    container_name: erp_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio_user
      MINIO_ROOT_PASSWORD: minio_password
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - erp_network

  mailhog:
    image: mailhog/mailhog:latest
    container_name: erp_mailhog
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - erp_network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: erp_backend
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://erp_user:erp_password@postgres:5432/erp_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio_user
      - MINIO_SECRET_KEY=minio_password
      - EMAIL_HOST=mailhog
      - EMAIL_PORT=1025
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - EMAIL_NOTIFICATIONS_ENABLED=True
      - AI_TEAM_EMAILS=ai-team@company.com
      - AI_ETHICS_TEAM_EMAILS=ethics@company.com
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/mediafiles
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    command: >
      sh -c "python manage.py migrate &&
             python manage.py collectstatic --noinput &&
             python manage.py runserver 0.0.0.0:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - erp_network

  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: erp_celery_worker
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://erp_user:erp_password@postgres:5432/erp_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minio_user
      - MINIO_SECRET_KEY=minio_password
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - EMAIL_NOTIFICATIONS_ENABLED=True
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A config worker -l info --concurrency=4
    restart: unless-stopped
    networks:
      - erp_network

  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: erp_celery_beat
    environment:
      - DEBUG=True
      - DATABASE_URL=postgresql://erp_user:erp_password@postgres:5432/erp_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
    volumes:
      - ./backend:/app
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    restart: unless-stopped
    networks:
      - erp_network

  celery_flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: erp_celery_flower
    command: celery -A config flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/0
      - FLOWER_BASIC_AUTH=admin:flower_password
    ports:
      - "5555:5555"
    networks:
      - erp_network
    depends_on:
      - redis
      - celery_worker
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: erp_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000/ws
      - VITE_APP_ENV=development
      - VITE_APP_VERSION=1.0.0
    command: npm run dev
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - erp_network

  # Optional services (use profiles to enable)
  prometheus:
    image: prom/prometheus:latest
    container_name: erp_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - erp_network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: erp_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=grafana_password
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "3001:3000"
    networks:
      - erp_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  backend_static:
    driver: local
  backend_media:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  erp_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
