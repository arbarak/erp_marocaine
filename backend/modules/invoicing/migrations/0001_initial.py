# Generated by Django 5.0.1 on 2025-10-05 06:04

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalPayment',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('payment_number', models.CharField(db_index=True, max_length=50, verbose_name='payment number')),
                ('payment_type', models.CharField(choices=[('CUSTOMER_PAYMENT', 'Customer Payment (AR)'), ('SUPPLIER_PAYMENT', 'Supplier Payment (AP)'), ('REFUND', 'Refund'), ('ADVANCE', 'Advance Payment')], max_length=20, verbose_name='payment type')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('CONFIRMED', 'Confirmed'), ('RECONCILED', 'Reconciled'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=15, verbose_name='state')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('payment_date', models.DateField(default=django.utils.timezone.now, verbose_name='payment date')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CHECK', 'Check'), ('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('ELECTRONIC', 'Electronic Payment'), ('OTHER', 'Other')], default='BANK_TRANSFER', max_length=20, verbose_name='payment method')),
                ('check_number', models.CharField(blank=True, max_length=50, verbose_name='check number')),
                ('bank_reference', models.CharField(blank=True, max_length=100, verbose_name='bank reference')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='confirmed at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Payment',
                'verbose_name_plural': 'historical Payments',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invoice_number', models.CharField(max_length=50, unique=True, verbose_name='invoice number')),
                ('invoice_type', models.CharField(choices=[('CUSTOMER', 'Customer Invoice (AR)'), ('SUPPLIER', 'Supplier Invoice (AP)'), ('CREDIT_NOTE', 'Credit Note'), ('DEBIT_NOTE', 'Debit Note')], default='CUSTOMER', max_length=15, verbose_name='invoice type')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('VALIDATED', 'Validated'), ('POSTED', 'Posted'), ('PAID', 'Paid'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], default='DRAFT', max_length=15, verbose_name='state')),
                ('invoice_date', models.DateField(default=django.utils.timezone.now, verbose_name='invoice date')),
                ('due_date', models.DateField(verbose_name='due date')),
                ('payment_terms_days', models.IntegerField(choices=[(0, 'Immediate'), (15, '15 days'), (30, '30 days'), (45, '45 days'), (60, '60 days'), (90, '90 days')], default=30, verbose_name='payment terms (days)')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='paid amount')),
                ('outstanding_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='outstanding amount')),
                ('supplier_invoice_number', models.CharField(blank=True, help_text='Original invoice number from supplier', max_length=50, verbose_name='supplier invoice number')),
                ('supplier_invoice_date', models.DateField(blank=True, null=True, verbose_name='supplier invoice date')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('validated_at', models.DateTimeField(blank=True, null=True, verbose_name='validated at')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-invoice_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=500, verbose_name='description')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='unit price')),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='discount percentage')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total price')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), max_digits=5, verbose_name='tax rate')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Invoice Line',
                'verbose_name_plural': 'Invoice Lines',
                'ordering': ['invoice', 'id'],
            },
        ),
        migrations.CreateModel(
            name='InvoicePayment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='allocated amount')),
                ('allocation_date', models.DateField(default=django.utils.timezone.now, verbose_name='allocation date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
            ],
            options={
                'verbose_name': 'Invoice Payment Allocation',
                'verbose_name_plural': 'Invoice Payment Allocations',
                'ordering': ['-allocation_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('payment_number', models.CharField(max_length=50, unique=True, verbose_name='payment number')),
                ('payment_type', models.CharField(choices=[('CUSTOMER_PAYMENT', 'Customer Payment (AR)'), ('SUPPLIER_PAYMENT', 'Supplier Payment (AP)'), ('REFUND', 'Refund'), ('ADVANCE', 'Advance Payment')], max_length=20, verbose_name='payment type')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('CONFIRMED', 'Confirmed'), ('RECONCILED', 'Reconciled'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=15, verbose_name='state')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))], verbose_name='amount')),
                ('payment_date', models.DateField(default=django.utils.timezone.now, verbose_name='payment date')),
                ('payment_method', models.CharField(choices=[('CASH', 'Cash'), ('CHECK', 'Check'), ('BANK_TRANSFER', 'Bank Transfer'), ('CREDIT_CARD', 'Credit Card'), ('ELECTRONIC', 'Electronic Payment'), ('OTHER', 'Other')], default='BANK_TRANSFER', max_length=20, verbose_name='payment method')),
                ('check_number', models.CharField(blank=True, max_length=50, verbose_name='check number')),
                ('bank_reference', models.CharField(blank=True, max_length=100, verbose_name='bank reference')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('confirmed_at', models.DateTimeField(blank=True, null=True, verbose_name='confirmed at')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-payment_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalInvoice',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('invoice_number', models.CharField(db_index=True, max_length=50, verbose_name='invoice number')),
                ('invoice_type', models.CharField(choices=[('CUSTOMER', 'Customer Invoice (AR)'), ('SUPPLIER', 'Supplier Invoice (AP)'), ('CREDIT_NOTE', 'Credit Note'), ('DEBIT_NOTE', 'Debit Note')], default='CUSTOMER', max_length=15, verbose_name='invoice type')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('VALIDATED', 'Validated'), ('POSTED', 'Posted'), ('PAID', 'Paid'), ('CANCELLED', 'Cancelled'), ('OVERDUE', 'Overdue')], default='DRAFT', max_length=15, verbose_name='state')),
                ('invoice_date', models.DateField(default=django.utils.timezone.now, verbose_name='invoice date')),
                ('due_date', models.DateField(verbose_name='due date')),
                ('payment_terms_days', models.IntegerField(choices=[(0, 'Immediate'), (15, '15 days'), (30, '30 days'), (45, '45 days'), (60, '60 days'), (90, '90 days')], default=30, verbose_name='payment terms (days)')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('paid_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='paid amount')),
                ('outstanding_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='outstanding amount')),
                ('supplier_invoice_number', models.CharField(blank=True, help_text='Original invoice number from supplier', max_length=50, verbose_name='supplier invoice number')),
                ('supplier_invoice_date', models.DateField(blank=True, null=True, verbose_name='supplier invoice date')),
                ('reference', models.CharField(blank=True, max_length=100, verbose_name='reference')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('validated_at', models.DateTimeField(blank=True, null=True, verbose_name='validated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'historical Invoice',
                'verbose_name_plural': 'historical Invoices',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
