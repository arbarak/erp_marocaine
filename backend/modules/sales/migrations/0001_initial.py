# Generated by Django 5.0.1 on 2025-10-05 06:04

import django.core.validators
import django.db.models.deletion
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('companies', '0001_initial'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('customer_code', models.CharField(help_text='Unique customer code', max_length=20, verbose_name='customer code')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('customer_type', models.CharField(choices=[('COMPANY', 'Company'), ('INDIVIDUAL', 'Individual'), ('GOVERNMENT', 'Government Entity'), ('NGO', 'Non-Governmental Organization')], default='COMPANY', max_length=15, verbose_name='customer type')),
                ('ice', models.CharField(blank=True, help_text="Identifiant Commun de l'Entreprise (15 digits)", max_length=15, validators=[django.core.validators.RegexValidator('^\\d{15}$', 'ICE must be exactly 15 digits')], verbose_name='ICE')),
                ('if_number', models.CharField(blank=True, help_text='Identifiant Fiscal (7-8 digits)', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{7,8}$', 'IF must be 7 or 8 digits')], verbose_name='IF number')),
                ('rc', models.CharField(blank=True, help_text='Registre de Commerce', max_length=50, verbose_name='RC')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('fax', models.CharField(blank=True, max_length=20, verbose_name='fax')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('address_line1', models.CharField(blank=True, max_length=200, verbose_name='address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=200, verbose_name='address line 2')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='state/province')),
                ('country', models.CharField(default='Morocco', max_length=100, verbose_name='country')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='credit limit')),
                ('currency', models.CharField(default='MAD', help_text='Default currency for this customer', max_length=3, verbose_name='currency')),
                ('is_subject_to_vat', models.BooleanField(default=True, help_text='Whether this customer is subject to VAT', verbose_name='subject to VAT')),
                ('vat_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Default VAT rate for this customer (%)', max_digits=5, verbose_name='VAT rate')),
                ('is_subject_to_withholding', models.BooleanField(default=False, help_text='Whether sales to this customer are subject to withholding tax', verbose_name='subject to withholding tax')),
                ('withholding_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Withholding tax rate (%)', max_digits=5, verbose_name='withholding tax rate')),
                ('rating', models.IntegerField(default=5, help_text='Customer rating (1-10)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='rating')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether this customer is approved for sales', verbose_name='is approved')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_customers', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customers', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_customers', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('sales_person', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_customers', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
            ],
            options={
                'verbose_name': 'Customer',
                'verbose_name_plural': 'Customers',
                'ordering': ['customer_code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='title')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='department')),
                ('contact_type', models.CharField(choices=[('PRIMARY', 'Primary Contact'), ('SALES', 'Sales Contact'), ('TECHNICAL', 'Technical Contact'), ('BILLING', 'Billing Contact'), ('SHIPPING', 'Shipping Contact'), ('OTHER', 'Other')], default='OTHER', max_length=15, verbose_name='contact type')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('is_primary', models.BooleanField(default=False, help_text='Primary contact for this customer', verbose_name='is primary')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='sales.customer', verbose_name='customer')),
            ],
            options={
                'verbose_name': 'Customer Contact',
                'verbose_name_plural': 'Customer Contacts',
                'ordering': ['customer', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='CustomerPriceList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('minimum_quantity', models.DecimalField(decimal_places=6, default=Decimal('1.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='minimum quantity')),
                ('valid_from', models.DateField(verbose_name='valid from')),
                ('valid_to', models.DateField(blank=True, null=True, verbose_name='valid to')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_customer_prices', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_lists', to='sales.customer', verbose_name='customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_prices', to='catalog.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Customer Price List',
                'verbose_name_plural': 'Customer Price Lists',
                'ordering': ['customer', 'product', '-valid_from'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('delivery_number', models.CharField(max_length=100, verbose_name='delivery number')),
                ('delivery_date', models.DateField(verbose_name='delivery date')),
                ('actual_delivery_date', models.DateField(blank=True, null=True, verbose_name='actual delivery date')),
                ('delivery_address', models.TextField(verbose_name='delivery address')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('READY', 'Ready for Delivery'), ('IN_TRANSIT', 'In Transit'), ('DELIVERED', 'Delivered'), ('RETURNED', 'Returned'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=15, verbose_name='state')),
                ('shipping_method', models.CharField(blank=True, max_length=100, verbose_name='shipping method')),
                ('tracking_number', models.CharField(blank=True, max_length=100, verbose_name='tracking number')),
                ('carrier', models.CharField(blank=True, max_length=100, verbose_name='carrier')),
                ('vehicle_number', models.CharField(blank=True, max_length=50, verbose_name='vehicle number')),
                ('driver_name', models.CharField(blank=True, max_length=100, verbose_name='driver name')),
                ('driver_phone', models.CharField(blank=True, max_length=20, verbose_name='driver phone')),
                ('received_by_customer', models.CharField(blank=True, max_length=100, verbose_name='received by customer')),
                ('customer_signature', models.TextField(blank=True, verbose_name='customer signature')),
                ('delivery_confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='delivery confirmation date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('delivery_instructions', models.TextField(blank=True, verbose_name='delivery instructions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='delivery_notes', to='companies.company', verbose_name='company')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_notes', to='sales.customer', verbose_name='customer')),
                ('delivered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='delivered_deliveries', to=settings.AUTH_USER_MODEL, verbose_name='delivered by')),
                ('prepared_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='prepared_deliveries', to=settings.AUTH_USER_MODEL, verbose_name='prepared by')),
                ('source_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_notes', to='inventory.location', verbose_name='source location')),
            ],
            options={
                'verbose_name': 'Delivery Note',
                'verbose_name_plural': 'Delivery Notes',
                'ordering': ['-delivery_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DeliveryNoteLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity_ordered', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity ordered')),
                ('quantity_to_deliver', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity to deliver')),
                ('quantity_delivered', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity delivered')),
                ('lot_number', models.CharField(blank=True, max_length=50, verbose_name='lot number')),
                ('serial_number', models.CharField(blank=True, max_length=50, verbose_name='serial number')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('delivery_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='sales.deliverynote', verbose_name='delivery note')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_lines', to='catalog.product', verbose_name='product')),
            ],
            options={
                'verbose_name': 'Delivery Note Line',
                'verbose_name_plural': 'Delivery Note Lines',
                'ordering': ['delivery_note', 'product'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalCustomer',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('customer_code', models.CharField(help_text='Unique customer code', max_length=20, verbose_name='customer code')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('customer_type', models.CharField(choices=[('COMPANY', 'Company'), ('INDIVIDUAL', 'Individual'), ('GOVERNMENT', 'Government Entity'), ('NGO', 'Non-Governmental Organization')], default='COMPANY', max_length=15, verbose_name='customer type')),
                ('ice', models.CharField(blank=True, help_text="Identifiant Commun de l'Entreprise (15 digits)", max_length=15, validators=[django.core.validators.RegexValidator('^\\d{15}$', 'ICE must be exactly 15 digits')], verbose_name='ICE')),
                ('if_number', models.CharField(blank=True, help_text='Identifiant Fiscal (7-8 digits)', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{7,8}$', 'IF must be 7 or 8 digits')], verbose_name='IF number')),
                ('rc', models.CharField(blank=True, help_text='Registre de Commerce', max_length=50, verbose_name='RC')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('fax', models.CharField(blank=True, max_length=20, verbose_name='fax')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('address_line1', models.CharField(blank=True, max_length=200, verbose_name='address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=200, verbose_name='address line 2')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='state/province')),
                ('country', models.CharField(default='Morocco', max_length=100, verbose_name='country')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='credit limit')),
                ('currency', models.CharField(default='MAD', help_text='Default currency for this customer', max_length=3, verbose_name='currency')),
                ('is_subject_to_vat', models.BooleanField(default=True, help_text='Whether this customer is subject to VAT', verbose_name='subject to VAT')),
                ('vat_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Default VAT rate for this customer (%)', max_digits=5, verbose_name='VAT rate')),
                ('is_subject_to_withholding', models.BooleanField(default=False, help_text='Whether sales to this customer are subject to withholding tax', verbose_name='subject to withholding tax')),
                ('withholding_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Withholding tax rate (%)', max_digits=5, verbose_name='withholding tax rate')),
                ('rating', models.IntegerField(default=5, help_text='Customer rating (1-10)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='rating')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_approved', models.BooleanField(default=True, help_text='Whether this customer is approved for sales', verbose_name='is approved')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sales_person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
            ],
            options={
                'verbose_name': 'historical Customer',
                'verbose_name_plural': 'historical Customers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSalesQuotation',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('quotation_number', models.CharField(max_length=100, verbose_name='quotation number')),
                ('quotation_date', models.DateField(verbose_name='quotation date')),
                ('valid_until', models.DateField(verbose_name='valid until')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Customer'), ('CONFIRMED', 'Confirmed by Customer'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled'), ('CONVERTED', 'Converted to Order')], default='DRAFT', max_length=15, verbose_name='state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('expected_delivery_date', models.DateField(blank=True, null=True, verbose_name='expected delivery date')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('confirmed_by_customer', models.BooleanField(default=False, verbose_name='confirmed by customer')),
                ('customer_confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='customer confirmation date')),
                ('customer_reference', models.CharField(blank=True, max_length=100, verbose_name='customer reference')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.customer', verbose_name='customer')),
                ('delivery_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='delivery location')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sales_person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
            ],
            options={
                'verbose_name': 'historical Sales Quotation',
                'verbose_name_plural': 'historical Sales Quotations',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='ReturnNote',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('return_number', models.CharField(max_length=100, verbose_name='return number')),
                ('return_date', models.DateField(verbose_name='return date')),
                ('return_reason', models.CharField(choices=[('DEFECTIVE', 'Defective Product'), ('WRONG_ITEM', 'Wrong Item Delivered'), ('DAMAGED', 'Damaged in Transit'), ('NOT_NEEDED', 'No Longer Needed'), ('QUALITY_ISSUE', 'Quality Issue'), ('OTHER', 'Other')], default='OTHER', max_length=15, verbose_name='return reason')),
                ('return_description', models.TextField(blank=True, verbose_name='return description')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('RECEIVED', 'Received'), ('QUALITY_CHECK', 'Quality Check'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted'), ('POSTED', 'Posted to Inventory')], default='DRAFT', max_length=15, verbose_name='state')),
                ('quality_check_required', models.BooleanField(default=True, verbose_name='quality check required')),
                ('quality_check_passed', models.BooleanField(default=False, verbose_name='quality check passed')),
                ('quality_check_date', models.DateTimeField(blank=True, null=True, verbose_name='quality check date')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('posted_at', models.DateTimeField(blank=True, null=True, verbose_name='posted at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='rejection reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='return_notes', to='companies.company', verbose_name='company')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='return_notes', to='sales.customer', verbose_name='customer')),
                ('delivery_note', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='return_notes', to='sales.deliverynote', verbose_name='delivery note')),
                ('posted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_returns', to=settings.AUTH_USER_MODEL, verbose_name='posted by')),
                ('quality_check_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quality_checked_returns', to=settings.AUTH_USER_MODEL, verbose_name='quality checked by')),
                ('received_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_returns', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('return_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='return_notes', to='inventory.location', verbose_name='return location')),
            ],
            options={
                'verbose_name': 'Return Note',
                'verbose_name_plural': 'Return Notes',
                'ordering': ['-return_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReturnNoteLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity_delivered', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity delivered')),
                ('quantity_returned', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity returned')),
                ('quantity_accepted', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity accepted')),
                ('quantity_rejected', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity rejected')),
                ('quality_status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted')], default='PENDING', max_length=15, verbose_name='quality status')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('lot_number', models.CharField(blank=True, max_length=50, verbose_name='lot number')),
                ('serial_number', models.CharField(blank=True, max_length=50, verbose_name='serial number')),
                ('return_reason', models.CharField(choices=[('DEFECTIVE', 'Defective Product'), ('WRONG_ITEM', 'Wrong Item Delivered'), ('DAMAGED', 'Damaged in Transit'), ('NOT_NEEDED', 'No Longer Needed'), ('QUALITY_ISSUE', 'Quality Issue'), ('OTHER', 'Other')], default='OTHER', max_length=15, verbose_name='return reason')),
                ('damage_description', models.TextField(blank=True, verbose_name='damage description')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('delivery_line', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='return_lines', to='sales.deliverynoteline', verbose_name='delivery line')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='return_lines', to='catalog.product', verbose_name='product')),
                ('return_note', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='sales.returnnote', verbose_name='return note')),
            ],
            options={
                'verbose_name': 'Return Note Line',
                'verbose_name_plural': 'Return Note Lines',
                'ordering': ['return_note', 'product'],
            },
        ),
        migrations.CreateModel(
            name='SalesOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('order_number', models.CharField(max_length=100, verbose_name='order number')),
                ('customer_reference', models.CharField(blank=True, max_length=100, verbose_name='customer reference')),
                ('order_date', models.DateField(verbose_name='order date')),
                ('requested_delivery_date', models.DateField(verbose_name='requested delivery date')),
                ('confirmed_delivery_date', models.DateField(blank=True, null=True, verbose_name='confirmed delivery date')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('CONFIRMED', 'Confirmed'), ('IN_PROGRESS', 'In Progress'), ('PARTIALLY_DELIVERED', 'Partially Delivered'), ('DELIVERED', 'Fully Delivered'), ('CANCELLED', 'Cancelled'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20, verbose_name='state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('shipping_method', models.CharField(blank=True, max_length=100, verbose_name='shipping method')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_orders', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_sales_orders', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_orders', to='sales.customer', verbose_name='customer')),
                ('delivery_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sales_orders', to='inventory.location', verbose_name='delivery location')),
                ('sales_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_orders', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
            ],
            options={
                'verbose_name': 'Sales Order',
                'verbose_name_plural': 'Sales Orders',
                'ordering': ['-order_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='returnnote',
            name='sales_order',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='return_notes', to='sales.salesorder', verbose_name='sales order'),
        ),
        migrations.CreateModel(
            name='HistoricalReturnNote',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('return_number', models.CharField(max_length=100, verbose_name='return number')),
                ('return_date', models.DateField(verbose_name='return date')),
                ('return_reason', models.CharField(choices=[('DEFECTIVE', 'Defective Product'), ('WRONG_ITEM', 'Wrong Item Delivered'), ('DAMAGED', 'Damaged in Transit'), ('NOT_NEEDED', 'No Longer Needed'), ('QUALITY_ISSUE', 'Quality Issue'), ('OTHER', 'Other')], default='OTHER', max_length=15, verbose_name='return reason')),
                ('return_description', models.TextField(blank=True, verbose_name='return description')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('RECEIVED', 'Received'), ('QUALITY_CHECK', 'Quality Check'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted'), ('POSTED', 'Posted to Inventory')], default='DRAFT', max_length=15, verbose_name='state')),
                ('quality_check_required', models.BooleanField(default=True, verbose_name='quality check required')),
                ('quality_check_passed', models.BooleanField(default=False, verbose_name='quality check passed')),
                ('quality_check_date', models.DateTimeField(blank=True, null=True, verbose_name='quality check date')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('posted_at', models.DateTimeField(blank=True, null=True, verbose_name='posted at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='rejection reason')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.customer', verbose_name='customer')),
                ('delivery_note', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.deliverynote', verbose_name='delivery note')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('posted_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='posted by')),
                ('quality_check_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='quality checked by')),
                ('received_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('return_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='return location')),
                ('sales_order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.salesorder', verbose_name='sales order')),
            ],
            options={
                'verbose_name': 'historical Return Note',
                'verbose_name_plural': 'historical Return Notes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDeliveryNote',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('delivery_number', models.CharField(max_length=100, verbose_name='delivery number')),
                ('delivery_date', models.DateField(verbose_name='delivery date')),
                ('actual_delivery_date', models.DateField(blank=True, null=True, verbose_name='actual delivery date')),
                ('delivery_address', models.TextField(verbose_name='delivery address')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('READY', 'Ready for Delivery'), ('IN_TRANSIT', 'In Transit'), ('DELIVERED', 'Delivered'), ('RETURNED', 'Returned'), ('CANCELLED', 'Cancelled')], default='DRAFT', max_length=15, verbose_name='state')),
                ('shipping_method', models.CharField(blank=True, max_length=100, verbose_name='shipping method')),
                ('tracking_number', models.CharField(blank=True, max_length=100, verbose_name='tracking number')),
                ('carrier', models.CharField(blank=True, max_length=100, verbose_name='carrier')),
                ('vehicle_number', models.CharField(blank=True, max_length=50, verbose_name='vehicle number')),
                ('driver_name', models.CharField(blank=True, max_length=100, verbose_name='driver name')),
                ('driver_phone', models.CharField(blank=True, max_length=20, verbose_name='driver phone')),
                ('received_by_customer', models.CharField(blank=True, max_length=100, verbose_name='received by customer')),
                ('customer_signature', models.TextField(blank=True, verbose_name='customer signature')),
                ('delivery_confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='delivery confirmation date')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('delivery_instructions', models.TextField(blank=True, verbose_name='delivery instructions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.customer', verbose_name='customer')),
                ('delivered_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='delivered by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('prepared_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='prepared by')),
                ('source_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='source location')),
                ('sales_order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.salesorder', verbose_name='sales order')),
            ],
            options={
                'verbose_name': 'historical Delivery Note',
                'verbose_name_plural': 'historical Delivery Notes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='deliverynote',
            name='sales_order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_notes', to='sales.salesorder', verbose_name='sales order'),
        ),
        migrations.CreateModel(
            name='SalesOrderLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='Additional description or specifications', verbose_name='description')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='discount (%)')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='discount amount')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total price')),
                ('quantity_delivered', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity delivered')),
                ('quantity_pending', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity pending')),
                ('requested_delivery_date', models.DateField(blank=True, null=True, verbose_name='requested delivery date')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Tax rate (%)', max_digits=5, verbose_name='tax rate')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_order_lines', to='catalog.product', verbose_name='product')),
                ('sales_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='sales.salesorder', verbose_name='sales order')),
                ('uom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_order_lines', to='catalog.unitofmeasure', verbose_name='unit of measure')),
            ],
            options={
                'verbose_name': 'Sales Order Line',
                'verbose_name_plural': 'Sales Order Lines',
                'ordering': ['sales_order', 'product'],
            },
        ),
        migrations.AddField(
            model_name='deliverynoteline',
            name='so_line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='delivery_lines', to='sales.salesorderline', verbose_name='SO line'),
        ),
        migrations.CreateModel(
            name='SalesQuotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quotation_number', models.CharField(max_length=100, verbose_name='quotation number')),
                ('quotation_date', models.DateField(verbose_name='quotation date')),
                ('valid_until', models.DateField(verbose_name='valid until')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Customer'), ('CONFIRMED', 'Confirmed by Customer'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled'), ('CONVERTED', 'Converted to Order')], default='DRAFT', max_length=15, verbose_name='state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('expected_delivery_date', models.DateField(blank=True, null=True, verbose_name='expected delivery date')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('confirmed_by_customer', models.BooleanField(default=False, verbose_name='confirmed by customer')),
                ('customer_confirmation_date', models.DateTimeField(blank=True, null=True, verbose_name='customer confirmation date')),
                ('customer_reference', models.CharField(blank=True, max_length=100, verbose_name='customer reference')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales_quotations', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_quotations', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quotations', to='sales.customer', verbose_name='customer')),
                ('delivery_location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sales_quotations', to='inventory.location', verbose_name='delivery location')),
                ('sales_person', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sales_quotations', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
            ],
            options={
                'verbose_name': 'Sales Quotation',
                'verbose_name_plural': 'Sales Quotations',
                'ordering': ['-quotation_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='salesorder',
            name='quotation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sales_orders', to='sales.salesquotation', verbose_name='quotation'),
        ),
        migrations.CreateModel(
            name='HistoricalSalesOrder',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('order_number', models.CharField(max_length=100, verbose_name='order number')),
                ('customer_reference', models.CharField(blank=True, max_length=100, verbose_name='customer reference')),
                ('order_date', models.DateField(verbose_name='order date')),
                ('requested_delivery_date', models.DateField(verbose_name='requested delivery date')),
                ('confirmed_delivery_date', models.DateField(blank=True, null=True, verbose_name='confirmed delivery date')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('CONFIRMED', 'Confirmed'), ('IN_PROGRESS', 'In Progress'), ('PARTIALLY_DELIVERED', 'Partially Delivered'), ('DELIVERED', 'Fully Delivered'), ('CANCELLED', 'Cancelled'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20, verbose_name='state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('shipping_method', models.CharField(blank=True, max_length=100, verbose_name='shipping method')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='discount amount')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('customer', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.customer', verbose_name='customer')),
                ('delivery_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='delivery location')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('sales_person', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='sales person')),
                ('quotation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sales.salesquotation', verbose_name='quotation')),
            ],
            options={
                'verbose_name': 'historical Sales Order',
                'verbose_name_plural': 'historical Sales Orders',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SalesQuotationLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='Additional description or specifications', verbose_name='description')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('discount_percent', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='discount (%)')),
                ('discount_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='discount amount')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total price')),
                ('expected_delivery_date', models.DateField(blank=True, null=True, verbose_name='expected delivery date')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Tax rate (%)', max_digits=5, verbose_name='tax rate')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quotation_lines', to='catalog.product', verbose_name='product')),
                ('quotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='sales.salesquotation', verbose_name='quotation')),
                ('uom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quotation_lines', to='catalog.unitofmeasure', verbose_name='unit of measure')),
            ],
            options={
                'verbose_name': 'Sales Quotation Line',
                'verbose_name_plural': 'Sales Quotation Lines',
                'ordering': ['quotation', 'product'],
            },
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['company', 'is_active'], name='sales_custo_company_902494_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['customer_code'], name='sales_custo_custome_c546c5_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['ice'], name='sales_custo_ice_38aa10_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['if_number'], name='sales_custo_if_numb_14a447_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['is_approved'], name='sales_custo_is_appr_7d0c83_idx'),
        ),
        migrations.AddIndex(
            model_name='customer',
            index=models.Index(fields=['sales_person'], name='sales_custo_sales_p_def783_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customer',
            unique_together={('company', 'customer_code')},
        ),
        migrations.AddIndex(
            model_name='customercontact',
            index=models.Index(fields=['customer', 'is_active'], name='sales_custo_custome_912af9_idx'),
        ),
        migrations.AddIndex(
            model_name='customercontact',
            index=models.Index(fields=['is_primary'], name='sales_custo_is_prim_b79d9b_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['customer', 'product'], name='sales_custo_custome_1adf85_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['valid_from', 'valid_to'], name='sales_custo_valid_f_ad1fbe_idx'),
        ),
        migrations.AddIndex(
            model_name='customerpricelist',
            index=models.Index(fields=['is_active'], name='sales_custo_is_acti_9bacc0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='customerpricelist',
            unique_together={('customer', 'product', 'valid_from')},
        ),
        migrations.AddIndex(
            model_name='returnnoteline',
            index=models.Index(fields=['return_note', 'product'], name='sales_retur_return__cbd9ff_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnoteline',
            index=models.Index(fields=['quality_status'], name='sales_retur_quality_c5f723_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnote',
            index=models.Index(fields=['company', 'state'], name='sales_retur_company_6f5814_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnote',
            index=models.Index(fields=['sales_order'], name='sales_retur_sales_o_4dc1b0_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnote',
            index=models.Index(fields=['customer'], name='sales_retur_custome_375d66_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnote',
            index=models.Index(fields=['return_date'], name='sales_retur_return__e15714_idx'),
        ),
        migrations.AddIndex(
            model_name='returnnote',
            index=models.Index(fields=['return_reason'], name='sales_retur_return__d12164_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='returnnote',
            unique_together={('company', 'return_number')},
        ),
        migrations.AddIndex(
            model_name='deliverynote',
            index=models.Index(fields=['company', 'state'], name='sales_deliv_company_bd88d3_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverynote',
            index=models.Index(fields=['sales_order'], name='sales_deliv_sales_o_d20b5c_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverynote',
            index=models.Index(fields=['customer'], name='sales_deliv_custome_19381d_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverynote',
            index=models.Index(fields=['delivery_date'], name='sales_deliv_deliver_3592e3_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverynote',
            index=models.Index(fields=['tracking_number'], name='sales_deliv_trackin_c6a14e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='deliverynote',
            unique_together={('company', 'delivery_number')},
        ),
        migrations.AddIndex(
            model_name='salesorderline',
            index=models.Index(fields=['sales_order', 'product'], name='sales_sales_sales_o_2ae066_idx'),
        ),
        migrations.AddIndex(
            model_name='deliverynoteline',
            index=models.Index(fields=['delivery_note', 'product'], name='sales_deliv_deliver_08fc50_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='deliverynoteline',
            unique_together={('delivery_note', 'so_line')},
        ),
        migrations.AddIndex(
            model_name='salesquotation',
            index=models.Index(fields=['company', 'state'], name='sales_sales_company_66ca13_idx'),
        ),
        migrations.AddIndex(
            model_name='salesquotation',
            index=models.Index(fields=['customer', 'state'], name='sales_sales_custome_24462c_idx'),
        ),
        migrations.AddIndex(
            model_name='salesquotation',
            index=models.Index(fields=['quotation_date'], name='sales_sales_quotati_0b9ee3_idx'),
        ),
        migrations.AddIndex(
            model_name='salesquotation',
            index=models.Index(fields=['valid_until'], name='sales_sales_valid_u_bb5d73_idx'),
        ),
        migrations.AddIndex(
            model_name='salesquotation',
            index=models.Index(fields=['sales_person'], name='sales_sales_sales_p_cff12a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='salesquotation',
            unique_together={('company', 'quotation_number')},
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['company', 'state'], name='sales_sales_company_11afcf_idx'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['customer', 'state'], name='sales_sales_custome_30de29_idx'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['order_date'], name='sales_sales_order_d_55e46c_idx'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['requested_delivery_date'], name='sales_sales_request_19db5a_idx'),
        ),
        migrations.AddIndex(
            model_name='salesorder',
            index=models.Index(fields=['sales_person'], name='sales_sales_sales_p_827fb9_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='salesorder',
            unique_together={('company', 'order_number')},
        ),
        migrations.AddIndex(
            model_name='salesquotationline',
            index=models.Index(fields=['quotation', 'product'], name='sales_sales_quotati_be0754_idx'),
        ),
    ]
