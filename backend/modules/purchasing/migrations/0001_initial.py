# Generated by Django 5.0.1 on 2025-10-05 06:04

import django.core.validators
import django.db.models.deletion
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('companies', '0001_initial'),
        ('inventory', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalRequestForQuotation',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('rfq_number', models.CharField(max_length=100, verbose_name='RFQ number')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Suppliers'), ('PARTIAL', 'Partially Quoted'), ('QUOTED', 'Fully Quoted'), ('CANCELLED', 'Cancelled'), ('EXPIRED', 'Expired')], default='DRAFT', max_length=15, verbose_name='state')),
                ('rfq_date', models.DateField(verbose_name='RFQ date')),
                ('deadline', models.DateTimeField(verbose_name='deadline')),
                ('requested_delivery_date', models.DateField(verbose_name='requested delivery date')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('delivery_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='delivery location')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Request for Quotation',
                'verbose_name_plural': 'historical Requests for Quotation',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSupplier',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('supplier_code', models.CharField(help_text='Unique supplier code', max_length=20, verbose_name='supplier code')),
                ('supplier_type', models.CharField(choices=[('COMPANY', 'Company'), ('INDIVIDUAL', 'Individual'), ('GOVERNMENT', 'Government Entity'), ('NGO', 'Non-Governmental Organization')], default='COMPANY', max_length=15, verbose_name='supplier type')),
                ('ice', models.CharField(blank=True, help_text="Identifiant Commun de l'Entreprise (15 digits)", max_length=15, validators=[django.core.validators.RegexValidator('^\\d{15}$', 'ICE must be exactly 15 digits')], verbose_name='ICE')),
                ('if_number', models.CharField(blank=True, help_text='Identifiant Fiscal (7-8 digits)', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{7,8}$', 'IF must be 7 or 8 digits')], verbose_name='IF number')),
                ('rc', models.CharField(blank=True, help_text='Registre de Commerce', max_length=50, verbose_name='RC')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('fax', models.CharField(blank=True, max_length=20, verbose_name='fax')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('address_line1', models.CharField(blank=True, max_length=200, verbose_name='address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=200, verbose_name='address line 2')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='state/province')),
                ('country', models.CharField(default='Morocco', max_length=100, verbose_name='country')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='credit limit')),
                ('currency', models.CharField(default='MAD', help_text='Default currency for this supplier', max_length=3, verbose_name='currency')),
                ('is_subject_to_vat', models.BooleanField(default=True, help_text='Whether this supplier is subject to VAT', verbose_name='subject to VAT')),
                ('vat_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Default VAT rate for this supplier (%)', max_digits=5, verbose_name='VAT rate')),
                ('is_subject_to_withholding', models.BooleanField(default=False, help_text='Whether purchases from this supplier are subject to withholding tax', verbose_name='subject to withholding tax')),
                ('withholding_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Withholding tax rate (%)', max_digits=5, verbose_name='withholding tax rate')),
                ('rating', models.IntegerField(default=5, help_text='Supplier rating (1-10)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='rating')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this supplier is approved for purchasing', verbose_name='is approved')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Supplier',
                'verbose_name_plural': 'historical Suppliers',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='PurchaseOrder',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('po_number', models.CharField(max_length=100, verbose_name='PO number')),
                ('order_date', models.DateField(verbose_name='order date')),
                ('expected_delivery_date', models.DateField(verbose_name='expected delivery date')),
                ('confirmed_delivery_date', models.DateField(blank=True, null=True, verbose_name='confirmed delivery date')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Supplier'), ('CONFIRMED', 'Confirmed by Supplier'), ('PARTIALLY_RECEIVED', 'Partially Received'), ('RECEIVED', 'Fully Received'), ('CANCELLED', 'Cancelled'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20, verbose_name='state')),
                ('approval_state', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=15, verbose_name='approval state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_purchase_orders', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchase_orders', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_purchase_orders', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('delivery_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='inventory.location', verbose_name='delivery location')),
            ],
            options={
                'verbose_name': 'Purchase Order',
                'verbose_name_plural': 'Purchase Orders',
                'ordering': ['-order_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoodsReceipt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('grn_number', models.CharField(max_length=100, verbose_name='GRN number')),
                ('receipt_date', models.DateField(verbose_name='receipt date')),
                ('delivery_note_number', models.CharField(blank=True, help_text="Supplier's delivery note number", max_length=100, verbose_name='delivery note number')),
                ('vehicle_number', models.CharField(blank=True, max_length=50, verbose_name='vehicle number')),
                ('driver_name', models.CharField(blank=True, max_length=100, verbose_name='driver name')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('RECEIVED', 'Received'), ('QUALITY_CHECK', 'Quality Check'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted'), ('POSTED', 'Posted to Inventory')], default='DRAFT', max_length=15, verbose_name='state')),
                ('quality_check_required', models.BooleanField(default=True, verbose_name='quality check required')),
                ('quality_check_passed', models.BooleanField(default=False, verbose_name='quality check passed')),
                ('quality_check_date', models.DateTimeField(blank=True, null=True, verbose_name='quality check date')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('posted_at', models.DateTimeField(blank=True, null=True, verbose_name='posted at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='rejection reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goods_receipts', to='companies.company', verbose_name='company')),
                ('posted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='posted_goods_receipts', to=settings.AUTH_USER_MODEL, verbose_name='posted by')),
                ('quality_check_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quality_checked_receipts', to=settings.AUTH_USER_MODEL, verbose_name='quality checked by')),
                ('received_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='received_goods_receipts', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('receiving_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='goods_receipts', to='inventory.location', verbose_name='receiving location')),
                ('purchase_order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='goods_receipts', to='purchasing.purchaseorder', verbose_name='purchase order')),
            ],
            options={
                'verbose_name': 'Goods Receipt',
                'verbose_name_plural': 'Goods Receipts',
                'ordering': ['-receipt_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PurchaseOrderLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='Additional description or specifications', verbose_name='description')),
                ('supplier_product_code', models.CharField(blank=True, max_length=100, verbose_name='supplier product code')),
                ('supplier_product_name', models.CharField(blank=True, max_length=200, verbose_name='supplier product name')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total price')),
                ('quantity_received', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity received')),
                ('quantity_pending', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity pending')),
                ('expected_delivery_date', models.DateField(blank=True, null=True, verbose_name='expected delivery date')),
                ('tax_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Tax rate (%)', max_digits=5, verbose_name='tax rate')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_order_lines', to='catalog.product', verbose_name='product')),
                ('purchase_order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchasing.purchaseorder', verbose_name='purchase order')),
                ('uom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_order_lines', to='catalog.unitofmeasure', verbose_name='unit of measure')),
            ],
            options={
                'verbose_name': 'Purchase Order Line',
                'verbose_name_plural': 'Purchase Order Lines',
                'ordering': ['purchase_order', 'product'],
            },
        ),
        migrations.CreateModel(
            name='GoodsReceiptLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quantity_ordered', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity ordered')),
                ('quantity_received', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity received')),
                ('quantity_accepted', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity accepted')),
                ('quantity_rejected', models.DecimalField(decimal_places=6, default=Decimal('0.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='quantity rejected')),
                ('quality_status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted')], default='PENDING', max_length=15, verbose_name='quality status')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('lot_number', models.CharField(blank=True, max_length=50, verbose_name='lot number')),
                ('serial_number', models.CharField(blank=True, max_length=50, verbose_name='serial number')),
                ('expiry_date', models.DateField(blank=True, null=True, verbose_name='expiry date')),
                ('damage_description', models.TextField(blank=True, verbose_name='damage description')),
                ('defect_type', models.CharField(blank=True, max_length=100, verbose_name='defect type')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('goods_receipt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchasing.goodsreceipt', verbose_name='goods receipt')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='receipt_lines', to='catalog.product', verbose_name='product')),
                ('po_line', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='receipt_lines', to='purchasing.purchaseorderline', verbose_name='PO line')),
            ],
            options={
                'verbose_name': 'Goods Receipt Line',
                'verbose_name_plural': 'Goods Receipt Lines',
                'ordering': ['goods_receipt', 'product'],
            },
        ),
        migrations.CreateModel(
            name='RequestForQuotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rfq_number', models.CharField(max_length=100, verbose_name='RFQ number')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Suppliers'), ('PARTIAL', 'Partially Quoted'), ('QUOTED', 'Fully Quoted'), ('CANCELLED', 'Cancelled'), ('EXPIRED', 'Expired')], default='DRAFT', max_length=15, verbose_name='state')),
                ('rfq_date', models.DateField(verbose_name='RFQ date')),
                ('deadline', models.DateTimeField(verbose_name='deadline')),
                ('requested_delivery_date', models.DateField(verbose_name='requested delivery date')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_rfqs', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfqs', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_rfqs', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('delivery_location', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rfqs', to='inventory.location', verbose_name='delivery location')),
            ],
            options={
                'verbose_name': 'Request for Quotation',
                'verbose_name_plural': 'Requests for Quotation',
                'ordering': ['-rfq_date', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='rfq',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_orders', to='purchasing.requestforquotation', verbose_name='RFQ'),
        ),
        migrations.CreateModel(
            name='RFQLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, help_text='Additional description or specifications', verbose_name='description')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('specifications', models.TextField(blank=True, verbose_name='specifications')),
                ('quality_requirements', models.TextField(blank=True, verbose_name='quality requirements')),
                ('required_delivery_date', models.DateField(blank=True, null=True, verbose_name='required delivery date')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rfq_lines', to='catalog.product', verbose_name='product')),
                ('rfq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchasing.requestforquotation', verbose_name='RFQ')),
                ('uom', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='rfq_lines', to='catalog.unitofmeasure', verbose_name='unit of measure')),
            ],
            options={
                'verbose_name': 'RFQ Line',
                'verbose_name_plural': 'RFQ Lines',
                'ordering': ['rfq', 'product'],
            },
        ),
        migrations.CreateModel(
            name='Supplier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('supplier_code', models.CharField(help_text='Unique supplier code', max_length=20, verbose_name='supplier code')),
                ('supplier_type', models.CharField(choices=[('COMPANY', 'Company'), ('INDIVIDUAL', 'Individual'), ('GOVERNMENT', 'Government Entity'), ('NGO', 'Non-Governmental Organization')], default='COMPANY', max_length=15, verbose_name='supplier type')),
                ('ice', models.CharField(blank=True, help_text="Identifiant Commun de l'Entreprise (15 digits)", max_length=15, validators=[django.core.validators.RegexValidator('^\\d{15}$', 'ICE must be exactly 15 digits')], verbose_name='ICE')),
                ('if_number', models.CharField(blank=True, help_text='Identifiant Fiscal (7-8 digits)', max_length=8, validators=[django.core.validators.RegexValidator('^\\d{7,8}$', 'IF must be 7 or 8 digits')], verbose_name='IF number')),
                ('rc', models.CharField(blank=True, help_text='Registre de Commerce', max_length=50, verbose_name='RC')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('fax', models.CharField(blank=True, max_length=20, verbose_name='fax')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('address_line1', models.CharField(blank=True, max_length=200, verbose_name='address line 1')),
                ('address_line2', models.CharField(blank=True, max_length=200, verbose_name='address line 2')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('state_province', models.CharField(blank=True, max_length=100, verbose_name='state/province')),
                ('country', models.CharField(default='Morocco', max_length=100, verbose_name='country')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('credit_limit', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='credit limit')),
                ('currency', models.CharField(default='MAD', help_text='Default currency for this supplier', max_length=3, verbose_name='currency')),
                ('is_subject_to_vat', models.BooleanField(default=True, help_text='Whether this supplier is subject to VAT', verbose_name='subject to VAT')),
                ('vat_rate', models.DecimalField(decimal_places=2, default=Decimal('20.00'), help_text='Default VAT rate for this supplier (%)', max_digits=5, verbose_name='VAT rate')),
                ('is_subject_to_withholding', models.BooleanField(default=False, help_text='Whether purchases from this supplier are subject to withholding tax', verbose_name='subject to withholding tax')),
                ('withholding_rate', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Withholding tax rate (%)', max_digits=5, verbose_name='withholding tax rate')),
                ('rating', models.IntegerField(default=5, help_text='Supplier rating (1-10)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='rating')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether this supplier is approved for purchasing', verbose_name='is approved')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_suppliers', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='suppliers', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_suppliers', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
            ],
            options={
                'verbose_name': 'Supplier',
                'verbose_name_plural': 'Suppliers',
                'ordering': ['supplier_code', 'name'],
            },
        ),
        migrations.CreateModel(
            name='RFQSupplierInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('invited_at', models.DateTimeField(verbose_name='invited at')),
                ('response_received', models.BooleanField(default=False, verbose_name='response received')),
                ('response_date', models.DateTimeField(blank=True, null=True, verbose_name='response date')),
                ('invitation_notes', models.TextField(blank=True, verbose_name='invitation notes')),
                ('response_notes', models.TextField(blank=True, verbose_name='response notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sent_rfq_invitations', to=settings.AUTH_USER_MODEL, verbose_name='invited by')),
                ('rfq', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_invitations', to='purchasing.requestforquotation', verbose_name='RFQ')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rfq_invitations', to='purchasing.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'RFQ Supplier Invitation',
                'verbose_name_plural': 'RFQ Supplier Invitations',
                'ordering': ['rfq', 'supplier'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='purchase_orders', to='purchasing.supplier', verbose_name='supplier'),
        ),
        migrations.CreateModel(
            name='HistoricalGoodsReceipt',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('grn_number', models.CharField(max_length=100, verbose_name='GRN number')),
                ('receipt_date', models.DateField(verbose_name='receipt date')),
                ('delivery_note_number', models.CharField(blank=True, help_text="Supplier's delivery note number", max_length=100, verbose_name='delivery note number')),
                ('vehicle_number', models.CharField(blank=True, max_length=50, verbose_name='vehicle number')),
                ('driver_name', models.CharField(blank=True, max_length=100, verbose_name='driver name')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('RECEIVED', 'Received'), ('QUALITY_CHECK', 'Quality Check'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('PARTIAL', 'Partially Accepted'), ('POSTED', 'Posted to Inventory')], default='DRAFT', max_length=15, verbose_name='state')),
                ('quality_check_required', models.BooleanField(default=True, verbose_name='quality check required')),
                ('quality_check_passed', models.BooleanField(default=False, verbose_name='quality check passed')),
                ('quality_check_date', models.DateTimeField(blank=True, null=True, verbose_name='quality check date')),
                ('quality_notes', models.TextField(blank=True, verbose_name='quality notes')),
                ('posted_at', models.DateTimeField(blank=True, null=True, verbose_name='posted at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('rejection_reason', models.TextField(blank=True, verbose_name='rejection reason')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('posted_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='posted by')),
                ('quality_check_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='quality checked by')),
                ('received_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='received by')),
                ('receiving_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='receiving location')),
                ('purchase_order', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='purchasing.purchaseorder', verbose_name='purchase order')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='purchasing.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'historical Goods Receipt',
                'verbose_name_plural': 'historical Goods Receipts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='goodsreceipt',
            name='supplier',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='goods_receipts', to='purchasing.supplier', verbose_name='supplier'),
        ),
        migrations.CreateModel(
            name='SupplierCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('code', models.CharField(max_length=20, verbose_name='code')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('sort_order', models.IntegerField(default=0, verbose_name='sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_categories', to='companies.company', verbose_name='company')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='purchasing.suppliercategory', verbose_name='parent category')),
            ],
            options={
                'verbose_name': 'Supplier Category',
                'verbose_name_plural': 'Supplier Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SupplierContact',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(max_length=100, verbose_name='last name')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='title')),
                ('department', models.CharField(blank=True, max_length=100, verbose_name='department')),
                ('contact_type', models.CharField(choices=[('PRIMARY', 'Primary Contact'), ('SALES', 'Sales Contact'), ('TECHNICAL', 'Technical Contact'), ('BILLING', 'Billing Contact'), ('SHIPPING', 'Shipping Contact'), ('OTHER', 'Other')], default='OTHER', max_length=15, verbose_name='contact type')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email')),
                ('phone', models.CharField(blank=True, max_length=20, verbose_name='phone')),
                ('mobile', models.CharField(blank=True, max_length=20, verbose_name='mobile')),
                ('is_primary', models.BooleanField(default=False, help_text='Primary contact for this supplier', verbose_name='is primary')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='purchasing.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'Supplier Contact',
                'verbose_name_plural': 'Supplier Contacts',
                'ordering': ['supplier', 'last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='SupplierPriceList',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('supplier_product_code', models.CharField(blank=True, help_text="Supplier's internal product code", max_length=100, verbose_name='supplier product code')),
                ('supplier_product_name', models.CharField(blank=True, help_text="Supplier's product name", max_length=200, verbose_name='supplier product name')),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('minimum_quantity', models.DecimalField(decimal_places=6, default=Decimal('1.000000'), max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='minimum quantity')),
                ('valid_from', models.DateField(verbose_name='valid from')),
                ('valid_to', models.DateField(blank=True, null=True, verbose_name='valid to')),
                ('lead_time_days', models.IntegerField(default=0, help_text='Lead time in days for this product from this supplier', validators=[django.core.validators.MinValueValidator(0)], verbose_name='lead time (days)')),
                ('quality_rating', models.IntegerField(default=5, help_text='Quality rating for this product from this supplier (1-10)', validators=[django.core.validators.MinValueValidator(1)], verbose_name='quality rating')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_preferred', models.BooleanField(default=False, help_text='Preferred supplier for this product', verbose_name='is preferred')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_supplier_prices', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='supplier_prices', to='catalog.product', verbose_name='product')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='price_lists', to='purchasing.supplier', verbose_name='supplier')),
            ],
            options={
                'verbose_name': 'Supplier Price List',
                'verbose_name_plural': 'Supplier Price Lists',
                'ordering': ['supplier', 'product', '-valid_from'],
            },
        ),
        migrations.CreateModel(
            name='SupplierQuotation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('quotation_number', models.CharField(max_length=100, verbose_name='quotation number')),
                ('quotation_date', models.DateField(verbose_name='quotation date')),
                ('valid_until', models.DateField(verbose_name='valid until')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SUBMITTED', 'Submitted'), ('UNDER_REVIEW', 'Under Review'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='DRAFT', max_length=15, verbose_name='state')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('warranty_terms', models.CharField(blank=True, max_length=200, verbose_name='warranty terms')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('reviewed_at', models.DateTimeField(blank=True, null=True, verbose_name='reviewed at')),
                ('review_notes', models.TextField(blank=True, verbose_name='review notes')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_quotations', to=settings.AUTH_USER_MODEL, verbose_name='reviewed by')),
                ('rfq_invitation', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='quotation', to='purchasing.rfqsupplierinvitation', verbose_name='RFQ invitation')),
            ],
            options={
                'verbose_name': 'Supplier Quotation',
                'verbose_name_plural': 'Supplier Quotations',
                'ordering': ['-quotation_date'],
            },
        ),
        migrations.AddField(
            model_name='purchaseorder',
            name='supplier_quotation',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='purchase_orders', to='purchasing.supplierquotation', verbose_name='supplier quotation'),
        ),
        migrations.CreateModel(
            name='HistoricalPurchaseOrder',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('po_number', models.CharField(max_length=100, verbose_name='PO number')),
                ('order_date', models.DateField(verbose_name='order date')),
                ('expected_delivery_date', models.DateField(verbose_name='expected delivery date')),
                ('confirmed_delivery_date', models.DateField(blank=True, null=True, verbose_name='confirmed delivery date')),
                ('state', models.CharField(choices=[('DRAFT', 'Draft'), ('SENT', 'Sent to Supplier'), ('CONFIRMED', 'Confirmed by Supplier'), ('PARTIALLY_RECEIVED', 'Partially Received'), ('RECEIVED', 'Fully Received'), ('CANCELLED', 'Cancelled'), ('CLOSED', 'Closed')], default='DRAFT', max_length=20, verbose_name='state')),
                ('approval_state', models.CharField(choices=[('PENDING', 'Pending Approval'), ('APPROVED', 'Approved'), ('REJECTED', 'Rejected')], default='PENDING', max_length=15, verbose_name='approval state')),
                ('delivery_address', models.TextField(blank=True, verbose_name='delivery address')),
                ('payment_terms', models.CharField(choices=[('IMMEDIATE', 'Immediate'), ('NET_15', 'Net 15 days'), ('NET_30', 'Net 30 days'), ('NET_45', 'Net 45 days'), ('NET_60', 'Net 60 days'), ('NET_90', 'Net 90 days'), ('COD', 'Cash on Delivery'), ('PREPAID', 'Prepaid')], default='NET_30', max_length=15, verbose_name='payment terms')),
                ('delivery_terms', models.CharField(blank=True, max_length=200, verbose_name='delivery terms')),
                ('currency', models.CharField(default='MAD', max_length=3, verbose_name='currency')),
                ('subtotal', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='subtotal')),
                ('tax_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='tax amount')),
                ('total_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total amount')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='approved at')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('terms_and_conditions', models.TextField(blank=True, verbose_name='terms and conditions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('approved_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='approved by')),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('delivery_location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location', verbose_name='delivery location')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('rfq', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='purchasing.requestforquotation', verbose_name='RFQ')),
                ('supplier', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='purchasing.supplier', verbose_name='supplier')),
                ('supplier_quotation', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='purchasing.supplierquotation', verbose_name='supplier quotation')),
            ],
            options={
                'verbose_name': 'historical Purchase Order',
                'verbose_name_plural': 'historical Purchase Orders',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SupplierQuotationLine',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0'))], verbose_name='unit price')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=15, validators=[django.core.validators.MinValueValidator(Decimal('0.000001'))], verbose_name='quantity')),
                ('total_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=15, verbose_name='total price')),
                ('lead_time_days', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='lead time (days)')),
                ('delivery_date', models.DateField(blank=True, null=True, verbose_name='delivery date')),
                ('supplier_product_code', models.CharField(blank=True, max_length=100, verbose_name='supplier product code')),
                ('supplier_product_name', models.CharField(blank=True, max_length=200, verbose_name='supplier product name')),
                ('notes', models.TextField(blank=True, verbose_name='notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('quotation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='purchasing.supplierquotation', verbose_name='quotation')),
                ('rfq_line', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='quotation_lines', to='purchasing.rfqline', verbose_name='RFQ line')),
            ],
            options={
                'verbose_name': 'Supplier Quotation Line',
                'verbose_name_plural': 'Supplier Quotation Lines',
                'ordering': ['quotation', 'rfq_line'],
            },
        ),
        migrations.AddIndex(
            model_name='purchaseorderline',
            index=models.Index(fields=['purchase_order', 'product'], name='purchasing__purchas_b1c84a_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceiptline',
            index=models.Index(fields=['goods_receipt', 'product'], name='purchasing__goods_r_9785a4_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceiptline',
            index=models.Index(fields=['quality_status'], name='purchasing__quality_6bf5ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='goodsreceiptline',
            unique_together={('goods_receipt', 'po_line')},
        ),
        migrations.AddIndex(
            model_name='requestforquotation',
            index=models.Index(fields=['company', 'state'], name='purchasing__company_54553c_idx'),
        ),
        migrations.AddIndex(
            model_name='requestforquotation',
            index=models.Index(fields=['rfq_date'], name='purchasing__rfq_dat_7070f4_idx'),
        ),
        migrations.AddIndex(
            model_name='requestforquotation',
            index=models.Index(fields=['deadline'], name='purchasing__deadlin_f435ee_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='requestforquotation',
            unique_together={('company', 'rfq_number')},
        ),
        migrations.AddIndex(
            model_name='rfqline',
            index=models.Index(fields=['rfq', 'product'], name='purchasing__rfq_id_a2a5fb_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['company', 'is_active'], name='purchasing__company_f2e22c_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['supplier_code'], name='purchasing__supplie_9d8ff2_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['ice'], name='purchasing__ice_8e81ed_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['if_number'], name='purchasing__if_numb_d7a094_idx'),
        ),
        migrations.AddIndex(
            model_name='supplier',
            index=models.Index(fields=['is_approved'], name='purchasing__is_appr_4522be_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='supplier',
            unique_together={('company', 'supplier_code')},
        ),
        migrations.AddIndex(
            model_name='rfqsupplierinvitation',
            index=models.Index(fields=['rfq', 'response_received'], name='purchasing__rfq_id_2938dc_idx'),
        ),
        migrations.AddIndex(
            model_name='rfqsupplierinvitation',
            index=models.Index(fields=['supplier', 'invited_at'], name='purchasing__supplie_217020_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rfqsupplierinvitation',
            unique_together={('rfq', 'supplier')},
        ),
        migrations.AddIndex(
            model_name='goodsreceipt',
            index=models.Index(fields=['company', 'state'], name='purchasing__company_103162_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceipt',
            index=models.Index(fields=['purchase_order'], name='purchasing__purchas_db4d43_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceipt',
            index=models.Index(fields=['supplier'], name='purchasing__supplie_582acb_idx'),
        ),
        migrations.AddIndex(
            model_name='goodsreceipt',
            index=models.Index(fields=['receipt_date'], name='purchasing__receipt_b3624e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='goodsreceipt',
            unique_together={('company', 'grn_number')},
        ),
        migrations.AddIndex(
            model_name='suppliercategory',
            index=models.Index(fields=['company', 'is_active'], name='purchasing__company_2aebac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='suppliercategory',
            unique_together={('company', 'code')},
        ),
        migrations.AddIndex(
            model_name='suppliercontact',
            index=models.Index(fields=['supplier', 'is_active'], name='purchasing__supplie_4841cc_idx'),
        ),
        migrations.AddIndex(
            model_name='suppliercontact',
            index=models.Index(fields=['is_primary'], name='purchasing__is_prim_92f2c7_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpricelist',
            index=models.Index(fields=['supplier', 'product'], name='purchasing__supplie_13ba2f_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpricelist',
            index=models.Index(fields=['valid_from', 'valid_to'], name='purchasing__valid_f_84eb66_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierpricelist',
            index=models.Index(fields=['is_active', 'is_preferred'], name='purchasing__is_acti_ce46fd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='supplierpricelist',
            unique_together={('supplier', 'product', 'valid_from')},
        ),
        migrations.AddIndex(
            model_name='supplierquotation',
            index=models.Index(fields=['quotation_date'], name='purchasing__quotati_16c3ba_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierquotation',
            index=models.Index(fields=['valid_until'], name='purchasing__valid_u_76c208_idx'),
        ),
        migrations.AddIndex(
            model_name='supplierquotation',
            index=models.Index(fields=['state'], name='purchasing__state_368eec_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['company', 'state'], name='purchasing__company_d563d4_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['supplier', 'state'], name='purchasing__supplie_8a4fef_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['order_date'], name='purchasing__order_d_09a604_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['expected_delivery_date'], name='purchasing__expecte_4ee8a4_idx'),
        ),
        migrations.AddIndex(
            model_name='purchaseorder',
            index=models.Index(fields=['approval_state'], name='purchasing__approva_86c0cb_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='purchaseorder',
            unique_together={('company', 'po_number')},
        ),
        migrations.AlterUniqueTogether(
            name='supplierquotationline',
            unique_together={('quotation', 'rfq_line')},
        ),
    ]
