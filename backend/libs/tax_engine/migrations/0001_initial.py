# Generated by Django 5.0.1 on 2025-10-05 06:04

import django.core.validators
import django.db.models.deletion
import simple_history.models
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('companies', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalTax',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('code', models.CharField(db_index=True, help_text='Unique code for this tax (e.g., TVA, RAS_TVA, EXCISE)', max_length=20, validators=[django.core.validators.RegexValidator('^[A-Z0-9_]+$', 'Tax code must contain only uppercase letters, numbers, and underscores')], verbose_name='tax code')),
                ('name', models.CharField(help_text='Display name for this tax', max_length=100, verbose_name='tax name')),
                ('name_arabic', models.CharField(blank=True, help_text='Arabic name for this tax', max_length=100, verbose_name='tax name (Arabic)')),
                ('type', models.CharField(choices=[('VAT', 'Value Added Tax (Taxe sur la Valeur Ajoutée - TVA)'), ('WHT', 'Withholding Tax (Retenue à la Source - RAS/TVA)'), ('EXCISE', "Excise Tax (Droits d'Accise)"), ('CUSTOMS', 'Customs Duty (Droits de Douane)'), ('OTHER', 'Other Tax')], default='VAT', max_length=10, verbose_name='tax type')),
                ('scope', models.CharField(choices=[('SALE', 'Sales Tax'), ('PURCHASE', 'Purchase Tax'), ('BOTH', 'Sales and Purchase Tax')], default='BOTH', help_text='Whether this tax applies to sales, purchases, or both', max_length=10, verbose_name='tax scope')),
                ('calculation_method', models.CharField(choices=[('PERCENTAGE', 'Percentage of Base Amount'), ('FIXED', 'Fixed Amount'), ('TIERED', 'Tiered Calculation')], default='PERCENTAGE', max_length=15, verbose_name='calculation method')),
                ('recoverable', models.BooleanField(default=True, help_text='Whether this tax can be recovered/deducted', verbose_name='recoverable')),
                ('inclusive', models.BooleanField(default=False, help_text='Whether this tax is included in the price by default', verbose_name='inclusive')),
                ('compound', models.BooleanField(default=False, help_text='Whether this tax is calculated on top of other taxes', verbose_name='compound')),
                ('dgi_code', models.CharField(blank=True, help_text='Direction Générale des Impôts tax code', max_length=20, verbose_name='DGI code')),
                ('legal_reference', models.CharField(blank=True, help_text='Legal reference (e.g., Article 87 du CGI)', max_length=200, verbose_name='legal reference')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Tax',
                'verbose_name_plural': 'historical Taxes',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Tax',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(help_text='Unique code for this tax (e.g., TVA, RAS_TVA, EXCISE)', max_length=20, unique=True, validators=[django.core.validators.RegexValidator('^[A-Z0-9_]+$', 'Tax code must contain only uppercase letters, numbers, and underscores')], verbose_name='tax code')),
                ('name', models.CharField(help_text='Display name for this tax', max_length=100, verbose_name='tax name')),
                ('name_arabic', models.CharField(blank=True, help_text='Arabic name for this tax', max_length=100, verbose_name='tax name (Arabic)')),
                ('type', models.CharField(choices=[('VAT', 'Value Added Tax (Taxe sur la Valeur Ajoutée - TVA)'), ('WHT', 'Withholding Tax (Retenue à la Source - RAS/TVA)'), ('EXCISE', "Excise Tax (Droits d'Accise)"), ('CUSTOMS', 'Customs Duty (Droits de Douane)'), ('OTHER', 'Other Tax')], default='VAT', max_length=10, verbose_name='tax type')),
                ('scope', models.CharField(choices=[('SALE', 'Sales Tax'), ('PURCHASE', 'Purchase Tax'), ('BOTH', 'Sales and Purchase Tax')], default='BOTH', help_text='Whether this tax applies to sales, purchases, or both', max_length=10, verbose_name='tax scope')),
                ('calculation_method', models.CharField(choices=[('PERCENTAGE', 'Percentage of Base Amount'), ('FIXED', 'Fixed Amount'), ('TIERED', 'Tiered Calculation')], default='PERCENTAGE', max_length=15, verbose_name='calculation method')),
                ('recoverable', models.BooleanField(default=True, help_text='Whether this tax can be recovered/deducted', verbose_name='recoverable')),
                ('inclusive', models.BooleanField(default=False, help_text='Whether this tax is included in the price by default', verbose_name='inclusive')),
                ('compound', models.BooleanField(default=False, help_text='Whether this tax is calculated on top of other taxes', verbose_name='compound')),
                ('dgi_code', models.CharField(blank=True, help_text='Direction Générale des Impôts tax code', max_length=20, verbose_name='DGI code')),
                ('legal_reference', models.CharField(blank=True, help_text='Legal reference (e.g., Article 87 du CGI)', max_length=200, verbose_name='legal reference')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
            ],
            options={
                'verbose_name': 'Tax',
                'verbose_name_plural': 'Taxes',
                'ordering': ['code'],
                'indexes': [models.Index(fields=['code'], name='tax_engine__code_2b406e_idx'), models.Index(fields=['type', 'scope'], name='tax_engine__type_230c2e_idx'), models.Index(fields=['is_active'], name='tax_engine__is_acti_b46e14_idx')],
            },
        ),
        migrations.CreateModel(
            name='HistoricalTaxRate',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Tax rate as percentage (e.g., 20.00 for 20%)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='rate percentage')),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed tax amount (for fixed calculation method)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='fixed amount')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum amount for this rate to apply', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='minimum amount')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum amount for this rate to apply', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='maximum amount')),
                ('description', models.CharField(blank=True, help_text='Description of this tax rate', max_length=200, verbose_name='description')),
                ('category', models.CharField(blank=True, help_text='Category for grouping rates (e.g., STANDARD, REDUCED, EXEMPT)', max_length=50, verbose_name='category')),
                ('applicable_sectors', models.TextField(blank=True, help_text='Sectors where this rate applies (JSON list)', verbose_name='applicable sectors')),
                ('exemption_conditions', models.TextField(blank=True, help_text='Conditions for exemption from this rate', verbose_name='exemption conditions')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tax', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tax_engine.tax', verbose_name='tax')),
            ],
            options={
                'verbose_name': 'historical Tax Rate',
                'verbose_name_plural': 'historical Tax Rates',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TaxProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of this tax profile', max_length=100, verbose_name='profile name')),
                ('description', models.TextField(blank=True, help_text='Description of when to use this profile', verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tax_profiles', to='companies.company', verbose_name='company')),
            ],
            options={
                'verbose_name': 'Tax Profile',
                'verbose_name_plural': 'Tax Profiles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TaxRate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Tax rate as percentage (e.g., 20.00 for 20%)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='rate percentage')),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed tax amount (for fixed calculation method)', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='fixed amount')),
                ('min_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum amount for this rate to apply', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='minimum amount')),
                ('max_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Maximum amount for this rate to apply', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='maximum amount')),
                ('description', models.CharField(blank=True, help_text='Description of this tax rate', max_length=200, verbose_name='description')),
                ('category', models.CharField(blank=True, help_text='Category for grouping rates (e.g., STANDARD, REDUCED, EXEMPT)', max_length=50, verbose_name='category')),
                ('applicable_sectors', models.TextField(blank=True, help_text='Sectors where this rate applies (JSON list)', verbose_name='applicable sectors')),
                ('exemption_conditions', models.TextField(blank=True, help_text='Conditions for exemption from this rate', verbose_name='exemption conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('tax', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rates', to='tax_engine.tax', verbose_name='tax')),
            ],
            options={
                'verbose_name': 'Tax Rate',
                'verbose_name_plural': 'Tax Rates',
                'ordering': ['tax', '-rate_pct', '-fixed_amount'],
            },
        ),
        migrations.CreateModel(
            name='TaxProfileRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default rate for this profile', verbose_name='is default')),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which taxes are applied', verbose_name='order')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tax_engine.taxprofile', verbose_name='tax profile')),
                ('tax_rate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tax_engine.taxrate', verbose_name='tax rate')),
            ],
            options={
                'verbose_name': 'Tax Profile Rate',
                'verbose_name_plural': 'Tax Profile Rates',
                'ordering': ['profile', 'order', 'tax_rate'],
            },
        ),
        migrations.AddField(
            model_name='taxprofile',
            name='taxes',
            field=models.ManyToManyField(related_name='profiles', through='tax_engine.TaxProfileRate', to='tax_engine.taxrate', verbose_name='tax rates'),
        ),
        migrations.CreateModel(
            name='HistoricalTaxRateVersion',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('valid_from', models.DateField(help_text='Date from which this rate version is valid', verbose_name='valid from')),
                ('valid_to', models.DateField(help_text='Date until which this rate version is valid', verbose_name='valid to')),
                ('withheld_flag', models.BooleanField(default=False, help_text='Whether this rate applies to withheld tax (RAS/TVA)', verbose_name='withheld flag')),
                ('withholding_rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Withholding rate percentage (for RAS/TVA calculations)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='withholding rate percentage')),
                ('dgi_rate_code', models.CharField(blank=True, help_text='Direction Générale des Impôts rate code', max_length=20, verbose_name='DGI rate code')),
                ('legal_basis', models.TextField(blank=True, help_text='Legal basis for this rate version', verbose_name='legal basis')),
                ('override_rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Override the base rate percentage for this version', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='override rate percentage')),
                ('override_fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Override the base fixed amount for this version', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='override fixed amount')),
                ('created_at', models.DateTimeField(blank=True, editable=False, verbose_name='created at')),
                ('updated_at', models.DateTimeField(blank=True, editable=False, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, help_text='Company-specific rate version (null for default rates)', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('tax_rate', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='tax_engine.taxrate', verbose_name='tax rate')),
            ],
            options={
                'verbose_name': 'historical Tax Rate Version',
                'verbose_name_plural': 'historical Tax Rate Versions',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='TaxRateVersion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('valid_from', models.DateField(help_text='Date from which this rate version is valid', verbose_name='valid from')),
                ('valid_to', models.DateField(help_text='Date until which this rate version is valid', verbose_name='valid to')),
                ('withheld_flag', models.BooleanField(default=False, help_text='Whether this rate applies to withheld tax (RAS/TVA)', verbose_name='withheld flag')),
                ('withholding_rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Withholding rate percentage (for RAS/TVA calculations)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='withholding rate percentage')),
                ('dgi_rate_code', models.CharField(blank=True, help_text='Direction Générale des Impôts rate code', max_length=20, verbose_name='DGI rate code')),
                ('legal_basis', models.TextField(blank=True, help_text='Legal basis for this rate version', verbose_name='legal basis')),
                ('override_rate_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Override the base rate percentage for this version', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))], verbose_name='override rate percentage')),
                ('override_fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Override the base fixed amount for this version', max_digits=15, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))], verbose_name='override fixed amount')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('company', models.ForeignKey(blank=True, help_text='Company-specific rate version (null for default rates)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='tax_rate_versions', to='companies.company', verbose_name='company')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_tax_rate_versions', to=settings.AUTH_USER_MODEL, verbose_name='created by')),
                ('tax_rate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='tax_engine.taxrate', verbose_name='tax rate')),
            ],
            options={
                'verbose_name': 'Tax Rate Version',
                'verbose_name_plural': 'Tax Rate Versions',
                'ordering': ['tax_rate', '-valid_from'],
            },
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['tax', 'is_active'], name='tax_engine__tax_id_72242c_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['category'], name='tax_engine__categor_4fea59_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrate',
            index=models.Index(fields=['min_amount', 'max_amount'], name='tax_engine__min_amo_badde0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxprofilerate',
            unique_together={('profile', 'tax_rate')},
        ),
        migrations.AlterUniqueTogether(
            name='taxprofile',
            unique_together={('name', 'company')},
        ),
        migrations.AddIndex(
            model_name='taxrateversion',
            index=models.Index(fields=['valid_from', 'valid_to'], name='tax_engine__valid_f_3e6681_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrateversion',
            index=models.Index(fields=['tax_rate', 'valid_from'], name='tax_engine__tax_rat_2d6b1e_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrateversion',
            index=models.Index(fields=['company', 'valid_from'], name='tax_engine__company_68a646_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrateversion',
            index=models.Index(fields=['withheld_flag'], name='tax_engine__withhel_a9ad5c_idx'),
        ),
        migrations.AddIndex(
            model_name='taxrateversion',
            index=models.Index(fields=['is_active'], name='tax_engine__is_acti_a03c06_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taxrateversion',
            unique_together={('tax_rate', 'valid_from', 'company')},
        ),
    ]
