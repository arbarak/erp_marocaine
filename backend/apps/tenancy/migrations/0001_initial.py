# Generated by Django 5.0.1

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tenant',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Tenant organization name', max_length=255)),
                ('slug', models.SlugField(help_text='URL-friendly identifier', max_length=100, unique=True)),
                ('subdomain', models.CharField(help_text="Subdomain for tenant access (e.g., 'acme' for acme.erp.com)", max_length=63, unique=True, validators=[django.core.validators.RegexValidator(message='Subdomain must be lowercase alphanumeric with hyphens', regex='^[a-z0-9]([a-z0-9\\-]{0,61}[a-z0-9])?$')])),
                ('domain', models.CharField(blank=True, help_text='Custom domain for tenant (optional)', max_length=255, null=True)),
                ('schema_name', models.CharField(help_text='PostgreSQL schema name for tenant data', max_length=63, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether tenant is active')),
                ('is_trial', models.BooleanField(default=False, help_text='Whether tenant is on trial')),
                ('trial_ends_at', models.DateTimeField(blank=True, null=True)),
                ('plan', models.CharField(choices=[('starter', 'Starter'), ('professional', 'Professional'), ('enterprise', 'Enterprise'), ('custom', 'Custom')], default='starter', max_length=50)),
                ('max_users', models.PositiveIntegerField(default=5, help_text='Maximum number of users')),
                ('max_companies', models.PositiveIntegerField(default=1, help_text='Maximum number of companies')),
                ('settings', models.JSONField(blank=True, default=dict, help_text='Tenant-specific settings')),
                ('features', models.JSONField(blank=True, default=list, help_text='Enabled features for tenant')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_tenants', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tenants',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='TenantConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('category', models.CharField(help_text='Configuration category', max_length=100)),
                ('key', models.CharField(help_text='Configuration key', max_length=100)),
                ('value', models.JSONField(help_text='Configuration value')),
                ('description', models.TextField(blank=True, help_text='Configuration description')),
                ('is_system', models.BooleanField(default=False, help_text='System configuration (not user-editable)')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configurations', to='tenancy.tenant')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tenant_configurations',
            },
        ),
        migrations.CreateModel(
            name='TenantInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Email address of invitee', max_length=254)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Manager'), ('user', 'User'), ('viewer', 'Viewer')], default='user', max_length=50)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('token', models.CharField(help_text='Invitation token', max_length=255, unique=True)),
                ('expires_at', models.DateTimeField(help_text='Invitation expiry')),
                ('message', models.TextField(blank=True, help_text='Personal message')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('accepted_at', models.DateTimeField(blank=True, null=True)),
                ('accepted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accepted_invitations', to=settings.AUTH_USER_MODEL)),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='tenancy.tenant')),
            ],
            options={
                'db_table': 'tenant_invitations',
            },
        ),
        migrations.CreateModel(
            name='TenantUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('owner', 'Owner'), ('admin', 'Administrator'), ('manager', 'Manager'), ('user', 'User'), ('viewer', 'Viewer')], default='user', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('invited_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('joined_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('permissions', models.JSONField(blank=True, default=list, help_text='Additional permissions')),
                ('tenant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_users', to='tenancy.tenant')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tenant_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'tenant_users',
            },
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['subdomain'], name='tenants_subdoma_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['domain'], name='tenants_domain_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['schema_name'], name='tenants_schema__8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenant',
            index=models.Index(fields=['is_active', 'created_at'], name='tenants_is_acti_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantconfiguration',
            index=models.Index(fields=['tenant', 'category'], name='tenant_con_tenant__8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantconfiguration',
            index=models.Index(fields=['tenant', 'category', 'key'], name='tenant_con_tenant__8b8b8c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tenantconfiguration',
            unique_together={('tenant', 'category', 'key')},
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['token'], name='tenant_inv_token_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['email', 'status'], name='tenant_inv_email_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantinvitation',
            index=models.Index(fields=['tenant', 'status'], name='tenant_inv_tenant__8b8b8b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tenantinvitation',
            unique_together={('tenant', 'email')},
        ),
        migrations.AddIndex(
            model_name='tenantuser',
            index=models.Index(fields=['tenant', 'user'], name='tenant_use_tenant__8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantuser',
            index=models.Index(fields=['user', 'is_active'], name='tenant_use_user_id_8b8b8b_idx'),
        ),
        migrations.AddIndex(
            model_name='tenantuser',
            index=models.Index(fields=['role', 'is_active'], name='tenant_use_role_8b8b8b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tenantuser',
            unique_together={('tenant', 'user')},
        ),
    ]
